//
// Created by Dana on 15.03.2020.
//

#ifndef SCHEDULER_CALENDARGENERATOR_H
#define SCHEDULER_CALENDARGENERATOR_H

#include <set>
#include <vector>
#include "Timeslot.h"
#include "../Definitions.h"
#include "TimeslotRule.h"
#include "Calendar.h"

/**
 * The Calendar Generator holds the user-created Timeslot Rules.
 * When a calendar is requested, the Calendar Generator
 * takes a start and end date and generates the
 * Timeslots in between those.
 */
class CalendarGenerator {

public:

    /**
     * Generates time slots based on all contained time slot rules between
     * a start and end date.
     * @param startDate First day of the calendar
     * @param endDate Last day of the calendar
     * @return New calendar consisting of all timeslots generated from timeslot
     * rules between given dates
     */
    [[nodiscard]] Calendar generateCalendar(const TimeDefs::Date &startDate, const TimeDefs::Date &endDate) const;
    /**
     * Adds a new time slot rule, specifying a weekly time slot that should be
     * added to a calendar generated by an object of this class.
     * Time slot rules are stored sorted.
     * @param weekday_num Weekday for generated time slots (0=Sunday,..., 6=Saturday)
     * @param start_hour The hours part of the starting time
     * @param start_minutes The minutes part of the starting time
     * @param duration The duration of the timeslot in hours
     */
    std::set<TimeslotRule>::const_iterator
    createTimeslotRule(const unsigned short weekday_num, const long start_hour, const long start_minutes, const long duration);
    /**
     * Delete a time slot Rule
     * @param timeslotRule Rule to be deleted
     */
    void deleteTimeslotRule(TimeslotRule& timeslotRule);
    /**
     * Print all rules to standard output.
     * Debugging function.
     */
    void printRules() const;

private:

    std::set<TimeslotRule> timeslotRules;
};


#endif //SCHEDULER_CALENDARGENERATOR_H
